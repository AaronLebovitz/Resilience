// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using AppKit;

namespace UpdateAcquisition
{
    public partial class CustomDialogController : NSViewController
    {

        #region Private Variables
        private string _label0Title = "";
        private string _label1Title = "";
        private string _label2Title = "";
        private string _label3Title = "";
        private string _label4Title = "";
        private ViewController _presentor;
        #endregion

        #region Computed Properties
        public string Label0Title
        {
            get { return _label0Title; }
            set { _label0Title = value; }
        }

        public string Label1Title
        {
            get { return _label1Title; }
            set { _label1Title = value; }
        }

        public string Label2Title
        {
            get { return _label2Title; }
            set { _label2Title = value; }
        }

        public string Label3Title
        {
            get { return _label3Title; }
            set { _label3Title = value; }
        }

        public string Label4Title
        {
            get { return _label4Title; }
            set { _label4Title = value; }
        }

        public ViewController Presentor
        {
            get { return _presentor; }
            set { _presentor = value; }
        }
        #endregion

        #region Constructors
        public CustomDialogController(IntPtr handle) : base(handle)
        {
        }
        #endregion

        #region Overrides
        public override void ViewWillAppear()
        {
            base.ViewWillAppear();
            Label0.StringValue = Label0Title;
            Label1.StringValue = Label1Title;
            Label2.StringValue = Label2Title;
            Label3.StringValue = Label3Title;
            Label4.StringValue = Label4Title;
        }
        #endregion

        #region Private Methods
        private void CloseDialog()
        {
            Presentor.GenerateDocs(Field0.StringValue, Field1.StringValue, Field2.StringValue, Field3.StringValue, Field4.StringValue);
            Presentor.DismissViewController(this);
        }
        #endregion

        #region Wired Actions
        partial void OKPressed(NSButton sender)
        {
            RaiseDialogAccepted();
            CloseDialog();
        }

        partial void Field0Changed(NSTextField sender)
        {
        }

        partial void Field1Changed(NSTextField sender)
        {
            if (Label1Title == "MAXAMOUNT")
            {
                Field2.StringValue = (NSString)ResilienceClasses.NumberToText.Convert(Convert.ToInt64(Math.Floor(Field1.DoubleValue)));
                Field2.StringValue += "dollars";
                long cents = Convert.ToInt64(100 * (Field1.DoubleValue - Math.Floor(Field1.DoubleValue)));
                if (cents > 0) Field2.StringValue += " and " + ResilienceClasses.NumberToText.Convert(cents) + "cents";
            }
        }

        partial void Field2Changed(NSTextField sender)
        {
        }

        partial void Field3Changed(NSTextField sender)
        {
            if (Label3Title == "PURCHASEAMOUNT")
            {
                Field4.StringValue = (NSString)ResilienceClasses.NumberToText.Convert(Convert.ToInt64(Math.Floor(Field3.DoubleValue)));
                Field4.StringValue += "dollars";
                long cents = Convert.ToInt64(100 * (Field3.DoubleValue - Math.Floor(Field3.DoubleValue)));
                if (cents > 0) Field4.StringValue += " and " + ResilienceClasses.NumberToText.Convert(cents) + "cents";
            }
        }

        partial void Field4Changed(NSTextField sender)
        {
        }
        #endregion

        #region Event Handling
        public EventHandler DialogAccepted;
        internal void RaiseDialogAccepted()
        {
            if (this.DialogAccepted != null) this.DialogAccepted(this, EventArgs.Empty);
        }
        #endregion
    }
}
